% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/EITrans.R
\name{EITrans}
\alias{EITrans}
\title{EITrans::EITrans}
\usage{
EITrans(
  ens,
  ens_times,
  ens_flts,
  ens_times_train,
  ens_times_dev,
  ens_times_test,
  obs,
  left_deltas,
  right_deltas,
  infinity_estimator,
  multiplier,
  circular_ens = F,
  member_weights = NULL
)
}
\arguments{
\item{ens}{A 4-dimensional array for ensemble forecasts. Dimensions should be
\verb{[stations, times, lead times, members]}.}

\item{ens_times}{A vector for ensemble forecast times.}

\item{ens_flts}{A vector for ensemble forecast lead times.}

\item{ens_times_train}{Training times from the ensemble forecast times.}

\item{ens_times_dev}{Development times from the ensemble forecast times.}

\item{ens_times_test}{Testing times from the ensemble forecast times.}

\item{obs}{A 3-dimensional array for observations that correspond to the
ensemble forecasts. Dimensions should be \verb{[stations, times, lead times]}.}

\item{left_deltas}{A vector of left-edge deltas to experiment.}

\item{infinity_estimator}{A vector of values to experiment for estimating
the ensemble spread.}

\item{multiplier}{A vector of values to experiment for adjusting the
ensemble member offset.}

\item{circular_ens}{Whether the ensemble forecast variable is circular.}

\item{member_weights}{Weights for each ensemble members when finding similar
historical ensemble forecasts.}

\item{rigth_deltas}{A vector of right-edge deltas to experiment.}
}
\value{
A list with the calibrated ensemble forecasts and intermediate results.
}
\description{
EITrans::EITrans is the main function for ensemble forecast calibration.
}
\examples{

\dontrun{

# If you are using MPI. Remember that you need to lauch this program with mpirun.
# I didn't have too much luck with the MPI spawn mechannism due to the hanging problem
# from Rmpi.
#
cl <- doMPI::startMPIcluster()
doMPI::registerDoMPI(cl)

# If you are using doSNOW
cl <- snow::makeCluster()
doSNOW::registerDoSNOW(cl)

eitrans_results <- EITrans(
  ens = ens$analogs,
  ens_times = ens$test_times,
  ens_flts = ens$flts,

  ens_times_train = ens$test_times[1:(test_start - 366)],
  ens_times_dev = ens$test_times[(test_start - 365):(test_start - 1)],
  ens_times_test = ens$test_times[test_start:test_end],

  obs = ens$obs_aligned,

  left_deltas = seq(-0.046, 0.12, by = 0.002),
  right_deltas = seq(-0.02, 0.044, by = 0.002),
  infinity_estimator = seq(0.1, 0.5, by = 0.1),
  multiplier = seq(0.1, 1.1, by = 0.1))

# If you are using MPI
doMPI::closeCluster(cl)
Rmpi::mpi.exit()

# If you are using doSNOW
snow::stopCluster(cl)
}

}
\author{
Weiming Hu \href{mailto:weiming@psu.edu}{weiming@psu.edu}
}
